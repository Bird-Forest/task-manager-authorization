{"version":3,"file":"static/js/711.ea61a248.chunk.js","mappings":"6QAEaA,EAAWC,EAAAA,GAAAA,KAAH,0RAcRC,EAAYD,EAAAA,GAAAA,MAAH,+kBAuBTE,EAAUF,EAAAA,GAAAA,OAAH,4vB,mBC/BL,SAASG,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAYjB,OACE,UAACN,EAAD,CAAUO,SAXS,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OAAOC,SAASF,KAAKG,MACxC,GAAa,KAATH,EAGF,OAFAL,GAASS,EAAAA,EAAAA,IAAQJ,SACjBF,EAAMG,OAAOI,QAGfC,MAAM,yCACP,EAEC,WACE,SAACd,EAAD,CAAWe,KAAK,OAAOC,KAAK,OAAOC,YAAY,wBAC/C,SAAChB,EAAD,CAASc,KAAK,SAAd,UACE,SAAC,MAAD,CAA0BG,UAAU,iBAI3C,CC3BM,I,EAAMC,EAAWpB,EAAAA,GAAAA,GAAH,oUAiBRqB,EAAWrB,EAAAA,GAAAA,GAAH,0WAmBRsB,EAAWtB,EAAAA,GAAAA,MAAAA,MAAmB,CAAEgB,KAAM,YAA3BhB,CAAH,mkBA2BRuB,EAAWvB,EAAAA,GAAAA,MAAH,0xBA0BjB,SAAAwB,GACA,MACO,SADCA,EAAMC,MAEJ,uFAAN,OAGIH,EAHJ,wHASM,sFAAN,OAGIA,EAHJ,uHASL,IAWUI,EAAY1B,EAAAA,GAAAA,OAAH,utB,UCxGP,SAAS2B,IACtB,IAAMvB,GAAWC,EAAAA,EAAAA,MACXuB,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBC,GAAWJ,EAAAA,EAAAA,IAAYK,EAAAA,IAMvBC,EAAUC,MAAMC,QAAQJ,IAAaA,EAASK,OACpD,OACE,2BACGV,IAAa,4CACbG,IAAS,uBAAIA,KACd,SAACX,EAAD,UACGe,GACCF,EAASM,KAAI,SAAAC,GAAI,OACf,UAACnB,EAAD,CAAyBoB,IAAIC,EAAAA,EAAAA,MAA7B,WACE,SAACpB,EAAD,CACEN,KAAK,WACL2B,SAAU,kBAAMvC,GAASwC,EAAAA,EAAAA,IAAgBJ,GAA/B,EACVK,QAASL,EAAKM,aAEhB,SAACvB,EAAD,WACE,cAAGJ,UAAU,OAAb,SAAqBqB,EAAK/B,UAE5B,SAACiB,EAAD,CAAWqB,QAAS,kBAAM3C,GAAS4C,EAAAA,EAAAA,IAAWR,EAAKC,IAA/B,EAApB,UACE,SAAC,MAAD,CAAkBtB,UAAU,qBAVjBuB,EAAAA,EAAAA,MADA,QAkB1B,CCpDM,IAAMO,EAAgBjD,EAAAA,GAAAA,IAAH,yGCOX,SAASkD,IAEtB,IAAMtB,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAM9B,OACE,UAACmB,EAAD,YACE,SAACE,EAAA,EAAD,WACE,6CAEF,SAAChD,EAAD,KACA,yBAAMyB,GAAa,4BACnB,SAACD,EAAD,MAGL,C","sources":["components/TaskForm/TaskForm.styled.js","components/TaskForm/TaskForm.jsx","components/TaskList/TaskList.styled.js","components/TaskList/TaskList.jsx","pages/Page.styled.js","pages/TasksPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormTask = styled.form`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  min-width: 360px;\n  gap: 10px;\n  padding: 0;\n  margin: 0;\n  /* margin-right: auto;\n  margin-left: auto; */\n  @media screen and (min-width: 600px) {\n    width: 600px;\n  }\n`;\nexport const InputForm = styled.input`\n  display: inline-flex;\n  background-color: rgb(102, 204, 255);\n  color: white;\n  min-width: 310px;\n  height: 30px;\n  font-size: 16px;\n  font-weight: 500;\n  border-radius: 10px;\n  border: 2px solid rgb(102, 204, 255);\n  outline: 2px solid rgb(102, 204, 255);\n  padding: 4px 8px;\n  -webkit-box-shadow: 0px 5px 6px 1px rgba(0, 0, 0, 0.75);\n  box-shadow: 0px 5px 6px 1px rgba(0, 0, 0, 0.75);\n  /* margin-right: auto;\n  margin-left: auto; */\n\n  @media screen and (min-width: 600px) {\n    width: 500px;\n    font-size: 20px;\n    padding: 8px 16px;\n  }\n`;\nexport const BtnForm = styled.button`\n  display: block;\n  border-radius: 10px;\n  background-color: rgb(102, 204, 255);\n  border: 2px solid rgb(102, 204, 255);\n  outline: 2px solid rgb(102, 204, 255);\n  width: 40px;\n  height: 40px;\n  padding: 0;\n  cursor: pointer;\n  -webkit-box-shadow: 0px 5px 6px 1px rgba(0, 0, 0, 0.75);\n  box-shadow: 0px 5px 6px 1px rgba(0, 0, 0, 0.75);\n\n  &:hover,\n  :focus {\n    background-color: rgb(77, 106, 255);\n    outline: 2px solid rgb(77, 106, 255);\n    border: 2px solid rgb(77, 106, 255);\n  }\n  .icon-add {\n    width: 28px;\n    height: 28px;\n    fill: rgb(77, 106, 255);\n  }\n  .icon-add:hover,\n  .icon-add:focus {\n    fill: white;\n  }\n  @media screen and (min-width: 600px) {\n    width: 48px;\n    height: 48px;\n  }\n`;\n","import React from 'react';\nimport { BsFillHandIndexThumbFill } from 'react-icons/bs';\nimport { BtnForm, FormTask, InputForm } from './TaskForm.styled';\n\nimport { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasksSlice';\n// import { addTask } from 'redux/operations';\n\nexport default function TaskForm() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const text = event.target.elements.text.value;\n    if (text !== '') {\n      dispatch(addTask(text));\n      event.target.reset();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n  return (\n    <FormTask onSubmit={handleSubmit}>\n      <InputForm type=\"text\" name=\"text\" placeholder=\"Enter task text...\" />\n      <BtnForm type=\"submit\">\n        <BsFillHandIndexThumbFill className=\"icon-add\" />\n      </BtnForm>\n    </FormTask>\n  );\n}\n","import styled from 'styled-components';\n\nexport const WrapList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-width: 360px;\n  gap: 5px;\n  padding: 0;\n  margin: 0;\n  /* margin-top: 0;\n  margin-bottom: 0; */\n  @media screen and (min-width: 600px) {\n    flex-direction: column;\n    width: 600px;\n  }\n`;\n\nexport const WrapTask = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: white;\n  padding: 4px 8px;\n  gap: 10px;\n  min-width: 360px;\n  padding: 10px;\n  /* margin-left: auto;\n  margin-right: auto; */\n\n  @media screen and (min-width: 600px) {\n    width: 600px;\n    padding: 8px 16px;\n    gap: 15px;\n  }\n`;\n\nexport const Checkbox = styled.input.attrs({ type: 'checkbox' })`\n  display: block;\n  background-color: blue;\n  border-radius: 2px;\n  outline: 3px solid rgb(77, 106, 255);\n  width: 28px;\n  height: 28px;\n  cursor: pointer;\n  -webkit-box-shadow: 0px 5px 6px 1px rgba(0, 0, 0, 0.75);\n  box-shadow: 0px 5px 6px 1px rgba(0, 0, 0, 0.75);\n\n  &:autofill {\n    border: 3px solid darkorange;\n  }\n  &:-webkit-autofill {\n    border: 3px solid darkorange;\n  }\n  .input[type='checkbox']:checked {\n    background-color: green;\n  }\n\n  @media screen and (min-width: 600px) {\n    width: 36px;\n    height: 36px;\n  }\n`;\n\nexport const TextTask = styled.label`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  background-color: rgb(77, 106, 255);\n  color: white;\n  min-width: 270px;\n  height: 30px;\n  border-radius: 10px;\n  border: 3px solid rgb(77, 106, 255);\n  -webkit-box-shadow: 0px 5px 6px 1px rgba(0, 0, 0, 0.75);\n  box-shadow: 0px 5px 6px 1px rgba(0, 0, 0, 0.75);\n  padding: 4px 8px;\n  margin: 0;\n  .text {\n    display: inline-block;\n    width: 270px;\n    font-size: 16px;\n    font-weight: 500;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    margin: 0;\n    padding: 0;\n  }\n\n  ${props => {\n    switch (props.$mode) {\n      case 'dark':\n        return `\n          background-color: white;\n          color:  rgb(0, 77, 153);\n          ${Checkbox}:checked + && {\n          background-color:  rgb(77, 106, 255);\n              color: white;\n          }\n        `;\n      default:\n        return `\n          background-color: white;\n          color: rgb(0, 77, 153);\n          ${Checkbox}:checked + && {\n            background-color:  rgb(77, 106, 255);\n            color: white;\n          }\n        `;\n    }\n  }}\n\n  @media screen and (min-width: 600px) {\n    min-width: 450px;\n    padding: 8px 16px;\n    .text {\n      width: 450px;\n      font-size: 20px;\n    }\n  }\n`;\nexport const BtnDelete = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  border: 3px solid rgb(77, 106, 255);\n  width: 36px;\n  height: 36px;\n  padding: 0;\n  cursor: pointer;\n  -webkit-box-shadow: 0px 5px 6px 1px rgba(0, 0, 0, 0.75);\n  box-shadow: 0px 5px 6px 1px rgba(0, 0, 0, 0.75);\n  &:hover,\n  :focus {\n    background-color: rgb(77, 106, 255);\n  }\n\n  .icon-delete {\n    width: 24px;\n    height: 24px;\n    fill: rgb(77, 106, 255);\n  }\n  .icon-delete:hover,\n  .icon-delete:focus {\n    fill: white;\n  }\n  @media screen and (min-width: 600px) {\n    width: 44px;\n    height: 44px;\n    .icon-delete {\n      width: 28px;\n      height: 28px;\n    }\n  }\n`;\n","// import React, { useEffect } from 'react';\nimport {\n  BtnDelete,\n  Checkbox,\n  TextTask,\n  WrapList,\n  WrapTask,\n} from './TaskList.styled';\nimport {\n  selectIsLoading,\n  selectError,\n  selectVisibleTasks,\n} from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { BsFillTrash3Fill } from 'react-icons/bs';\nimport { deleteTask, toggleCompleted } from 'redux/tasksSlice';\n// import { toggleCompleted, deleteTask, fetchTasks } from 'redux/operations';\n\nexport default function TaskList() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const newTasks = useSelector(selectVisibleTasks);\n\n  // useEffect(() => {\n  //   dispatch(fetchTasks());\n  // }, [dispatch]);\n\n  const showArr = Array.isArray(newTasks) && newTasks.length;\n  return (\n    <div>\n      {isLoading && <p>Loading tasks...</p>}\n      {error && <p>{error}</p>}\n      <WrapList>\n        {showArr &&\n          newTasks.map(task => (\n            <WrapTask key={nanoid()} id={nanoid()}>\n              <Checkbox\n                type=\"checkbox\"\n                onChange={() => dispatch(toggleCompleted(task))}\n                checked={task.completed}\n              />\n              <TextTask>\n                <p className=\"text\">{task.text}</p>\n              </TextTask>\n              <BtnDelete onClick={() => dispatch(deleteTask(task.id))}>\n                <BsFillTrash3Fill className=\"icon-delete\" />\n              </BtnDelete>\n            </WrapTask>\n          ))}\n      </WrapList>\n    </div>\n  );\n}\n","import styled from 'styled-components';\n\nexport const WrapTasksPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-top: 100px;\n`;\n","// import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectIsLoading } from 'redux/selectors';\n// import { fetchTasks } from 'redux/operations';\nimport TaskForm from 'components/TaskForm/TaskForm';\nimport TaskList from 'components/TaskList/TaskList';\nimport { WrapTasksPage } from './Page.styled';\n\nexport default function TasksPage() {\n  // const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  // useEffect(() => {\n  //   dispatch(fetchTasks());\n  // }, [dispatch]);\n\n  return (\n    <WrapTasksPage>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <TaskForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <TaskList />\n    </WrapTasksPage>\n  );\n}\n"],"names":["FormTask","styled","InputForm","BtnForm","TaskForm","dispatch","useDispatch","onSubmit","event","preventDefault","text","target","elements","value","addTask","reset","alert","type","name","placeholder","className","WrapList","WrapTask","Checkbox","TextTask","props","$mode","BtnDelete","TaskList","isLoading","useSelector","selectIsLoading","error","selectError","newTasks","selectVisibleTasks","showArr","Array","isArray","length","map","task","id","nanoid","onChange","toggleCompleted","checked","completed","onClick","deleteTask","WrapTasksPage","TasksPage","Helmet"],"sourceRoot":""}